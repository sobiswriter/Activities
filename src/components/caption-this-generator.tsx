// This is an autogenerated file from Firebase Studio.
"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { generateCaptionImagePrompt } from "@/ai/flows/generate-caption-image-prompt";
import { generateImage } from "@/ai/flows/generate-image";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import Image from "next/image";
import { Textarea } from "@/components/ui/textarea";

const formSchema = z.object({
  topic: z.string().optional(),
});

export function CaptionThisGenerator() {
  const [image, setImage] = useState<string | null>(null);
  const [caption, setCaption] = useState<string>("");
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: { topic: "" },
  });

  async function onGenerate(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setImage(null);
    setCaption("");

    try {
      const promptResult = await generateCaptionImagePrompt(values);
      if (!promptResult.prompt) {
        throw new Error("Failed to generate an image prompt.");
      }

      const imageResult = await generateImage({ prompt: promptResult.prompt });
      setImage(imageResult.imageDataUri);
    } catch (error) {
      console.error(error);
      toast({
        variant: "destructive",
        title: "Error Generating Image",
        description: "Could not generate an image for captioning. Please try again.",
      });
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Image Prompt</CardTitle>
          <CardDescription>
            Optionally provide a topic, and we'll generate an image for you to caption.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onGenerate)} className="space-y-4">
              <FormField
                control={form.control}
                name="topic"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Topic (Optional)</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., animals, space, office life" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" disabled={isLoading} className="w-full">
                {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : "Generate Image"}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>

      {isLoading && (
        <div className="flex flex-col items-center justify-center p-8 text-center bg-card rounded-xl">
          <Loader2 className="w-12 h-12 text-primary animate-spin" />
          <p className="mt-4 text-lg text-muted-foreground">Generating your image...</p>
        </div>
      )}

      {image && (
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>Write a Caption!</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Image
              src={image}
              alt="AI-generated image to be captioned"
              width={512}
              height={512}
              className="rounded-lg border-2 border-primary/20 w-full h-auto"
              data-ai-hint="caption this"
            />
            <Textarea
              placeholder="What's your witty caption?"
              value={caption}
              onChange={(e) => setCaption(e.target.value)}
              rows={3}
            />
          </CardContent>
          <CardFooter>
            <Button className="w-full" onClick={() => toast({ title: "Caption Submitted!", description: "Nice one!"})}>
              Share Caption
            </Button>
          </CardFooter>
        </Card>
      )}
    </div>
  );
}
