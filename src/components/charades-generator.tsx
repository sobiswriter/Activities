// This is an autogenerated file from Firebase Studio.
"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { generateCharadesPrompt, type GenerateCharadesPromptOutput } from "@/ai/flows/generate-charades-prompt";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Loader2, PersonStanding, RotateCw } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Badge } from "@/components/ui/badge";

const formSchema = z.object({
  topic: z.string().optional(),
});

export function CharadesGenerator() {
  const [data, setData] = useState<GenerateCharadesPromptOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: { topic: "" },
  });

  async function onGenerate(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    try {
      const result = await generateCharadesPrompt(values);
      setData(result);
    } catch (error) {
      console.error(error);
      toast({
        variant: "destructive",
        title: "Error Generating Prompt",
        description: "Could not generate a charades prompt. Please try again.",
      });
    } finally {
      setIsLoading(false);
    }
  }
  
  const handleGenerateClick = () => {
    // Manually trigger form submission
    form.handleSubmit(onGenerate)();
  };


  return (
    <div className="space-y-6">
      {!data && (
        <Card>
          <CardHeader>
            <CardTitle>Start a Game of Charades</CardTitle>
            <CardDescription>
              Optionally provide a topic to get a prompt, or leave it blank for a random one.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onGenerate)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="topic"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Topic (Optional)</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., movies, celebrities, actions" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button type="submit" disabled={isLoading} className="w-full text-lg py-6">
                  {isLoading ? <Loader2 className="h-6 w-6 animate-spin" /> : "Get Prompt"}
                </Button>
              </form>
            </Form>
          </CardContent>
        </Card>
      )}

      {isLoading && !data && (
         <div className="flex flex-col items-center justify-center p-8 text-center bg-card rounded-xl">
            <Loader2 className="w-12 h-12 text-primary animate-spin" />
            <p className="mt-4 text-lg text-muted-foreground">Getting your prompt...</p>
        </div>
      )}

      {data && (
        <div className="text-center space-y-6">
            <Card className="bg-primary/10 border-primary/20 shadow-xl transition-all duration-500 ease-out animate-in fade-in zoom-in-95">
            <CardHeader>
                <CardTitle className="text-primary text-2xl">Act it out!</CardTitle>
                <CardDescription>Pass the phone to the guessers when you're ready to start.</CardDescription>
            </CardHeader>
            <CardContent className="p-8">
                <p className="text-4xl font-bold text-foreground">{data.prompt}</p>
                <Badge variant="secondary" className="mt-4 text-sm">{data.category}</Badge>
            </CardContent>
            </Card>
             <Button onClick={handleGenerateClick} disabled={isLoading} className="w-full text-lg py-6">
                {isLoading ? <Loader2 className="h-6 w-6 animate-spin" /> : <RotateCw />}
                Get a New Prompt
            </Button>
        </div>
      )}
    </div>
  );
}
